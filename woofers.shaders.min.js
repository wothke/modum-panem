/*
*	Copyright (C) 2017 Juergen Wothke
*/
function getRenderTarget(a,b){var c=new THREE.WebGLMultiRenderTarget(a,b);c.texSize=new THREE.Vector2(a,b),c.texture.format=THREE.RGBAFormat,c.texture.minFilter=THREE.LinearFilter,c.texture.magFilter=THREE.LinearFilter,c.texture.type=THREE.FloatType,c.texture.generateMipmaps=!1,c.stencilBuffer=!1,c.depthBuffer=!0;var d=c.texture.clone();return c.attachments.push(d),c.attachments[0].name="diffuse",c.attachments[1].name="scratchpad",c}WOO="WOO"in window?WOO:{},WOO.MultiTargetEffectComposer=function(a,b){if(this.renderer=a,void 0===b){var c={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat,stencilBuffer:!1},d=a.getSize();b=new THREE.WebGLRenderTarget(d.width,d.height,c)}this.renderTarget1=b,this.renderTarget2=this.cloneMultiTarget(b),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.passes=[],void 0===THREE.CopyShader&&console.error("WOO.MultiTargetEffectComposer relies on THREE.CopyShader"),this.copyPass=new THREE.ShaderPass(THREE.CopyShader)},Object.assign(WOO.MultiTargetEffectComposer.prototype,{cloneMultiTarget:function(a){var b=a.clone();if(null!==a.attachments&&a.attachments.length>0){b.attachments=[b.texture];var c=b.texture.clone();b.attachments.push(c)}return b},swapBuffers:function(){var a=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=a},addPass:function(a){this.passes.push(a);var b=this.renderer.getSize();a.setSize(b.width,b.height)},insertPass:function(a,b){this.passes.splice(b,0,a)},render:function(a){var b,c,d=!1,e=this.passes.length;for(c=0;c<e;c++)if(b=this.passes[c],b.enabled!==!1){if(b.render(this.renderer,this.writeBuffer,this.readBuffer,a,d),b.needsSwap){if(d){var f=this.renderer.context;f.stencilFunc(f.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,a),f.stencilFunc(f.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==THREE.MaskPass&&(b instanceof THREE.MaskPass?d=!0:b instanceof THREE.ClearMaskPass&&(d=!1))}},reset:function(a){if(void 0===a){var b=this.renderer.getSize();a=this.cloneMultiTarget(this.renderTarget1),a.setSize(b.width,b.height)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=a,this.renderTarget2=this.cloneMultiTarget(a),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},setSize:function(a,b){this.renderTarget1.setSize(a,b),this.renderTarget2.setSize(a,b);for(var c=0;c<this.passes.length;c++)this.passes[c].setSize(a,b)}}),WOO.PlasmaShader={uniforms:{size:{type:"v2",value:new THREE.Vector2},time:{type:"f",value:0},tNoise:{type:"t",value:null},tDetector:{type:"t",value:null}},vertexShader:["#ifdef GL_ES","precision highp float;","#endif","void main()\t{","  gl_Position = vec4(position, 0.);","}"].join("\n"),fragmentShader:["#ifdef GL_ES","precision highp float;","#endif","uniform vec2 size;","uniform float time;","uniform sampler2D tNoise;","uniform sampler2D tDetector;","#define HALFPI 1.570796","mat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}","float noise(in vec3 p)","{","\tvec3 ip = floor(p);","    vec3 f = fract(p);","\tf = f*f*(3.0-2.0*f);","\tvec2 uv = (ip.xy+vec2(37.0,17.0)*ip.z) + f.xy;","\tvec2 rg = texture2D( tNoise, (uv+ 0.5)/256.0, -16.0 ).yx;","\treturn mix(rg.x, rg.y, f.z);","}","mat3 m3 = mat3( 0.00,  0.80,  0.60,","              -0.80,  0.36, -0.48,","              -0.60, -0.48,  0.64 );","float flow(in float b, in vec3 p, in float t)","{","\tfloat z=2.;","\tfloat rz = 0.;","\tvec3 bp = p;","\tif(b > 0.) {","\t\tfor (float i= 1.;i < 2. ;i++ ) {","\t\t\tp += time*.1;","\t\t\trz+= (sin(noise(p+t*0.8)*10.)*0.5+0.5) /z;","\t\t\tp = mix(bp,p,0.6);","\t\t\tz *= 2.;","\t\t\tp *= 2.01;","       \tp*= m3;","\t\t}","\t} else {","\t\tfor (float i= 1.;i < 3. ;i++ ) {","\t\t\tp += time*.1;","\t\t\trz+= (sin(noise(p+t*0.8)*6.)*0.5+0.5) /z;","\t\t\tp = mix(bp,p,0.6);","\t\t\tz *= 2.;","\t\t\tp *= 2.01;","       \tp*= m3;","\t\t}","\t}","\treturn rz;","}","void main()","{","\tfloat b= texture2D( tDetector, vec2(0.,0.)).b;","\tvec2 s = size;","\tif (b>0.) {s.x*= 8.; s.y*= 3.; }","\tvec2 p = gl_FragCoord.xy/s.xy-0.5;","\tp.x*=s.x/s.y;","\tvec3 ro = vec3(0.,0.,5.);","   vec3 rd = normalize(vec3(p*.7,-1.5));","   mat2 mx = mm2(time*.4);","   mat2 my = mm2(time*0.3);","   ro.xz *= mx;rd.xz *= mx;","   ro.xy *= my;rd.xy *= my;","   vec3 col = vec3(0.0125,0.,0.025);","\tvec3 rf = reflect( rd, ro+rd );","\tfloat nz = (-log(abs(flow(b, rf*1.2,time)-.01)));","\tfloat nz2 = (-log(abs(flow(b, rf*1.2,-time)-.01)));","\tcol += (0.1*nz*nz* vec3(0.4,0.12,0.4) + 0.05*nz2*nz2*vec3(0.75,0.75,.75))*0.8;","\tcol*=1.3;","\tfloat alpha= max(max(col.r, col.g),col.b);","   alpha= max(0., 0.7-cos(min(1.,alpha*(1.4))*HALFPI));","\talpha=max(0.,(alpha-(1.-b)*.4));","\tgl_FragColor = vec4(col, alpha);","}"].join("\n")},WOO.PlasmaPass=function(){THREE.Pass.call(this),void 0===WOO.PlasmaShader&&console.error("WOO.PlasmaPass relies on WOO.PlasmaShader");var a=WOO.PlasmaShader;this.uniforms=THREE.UniformsUtils.clone(a.uniforms),this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader}),this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new THREE.Scene,this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad)},WOO.PlasmaPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:WOO.PlasmaPass,render:function(a,b,c,d,e){this.quad.material=this.material,this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,b,this.clear)}}),WOO.AttachmentShader={uniforms:{color:{type:"fv",value:[1,1,1]},opacity:{type:"f",value:1},channel:{type:"i",value:1}},vertexShader:["#extension GL_EXT_draw_buffers : require","uniform vec3 color;","uniform float opacity;","uniform int channel;","varying vec2 vUv;","void main() {","    vUv = uv;","    gl_Position = projectionMatrix *","                  modelViewMatrix * vec4(position, 1.0 );","}"].join("\n"),fragmentShader:["#extension GL_EXT_draw_buffers : require","precision highp float;","varying vec2 vUv;","uniform vec3 color;","uniform float opacity;","uniform int channel;","void main(void) {","    gl_FragData[0] = vec4(color, opacity);","    float r= (channel == 1) ? 1. : 0.;","    float g= (channel == 2) ? 1. : 0.;","    if(channel == 3) {r=1.; g=1.;}","    gl_FragData[1] = vec4(r,g,0.,1.);","}"].join("\n"),getUniforms:function(a,b,c){var d=THREE.UniformsUtils.clone(WOO.AttachmentShader.uniforms);return d.color={type:"fv",value:[(a>>16)/255,(a>>8&255)/255,(255&a)/255]},d.opacity={type:"f",value:b},d.channel={type:"i",value:c},d}},WOO.ExhaustGlowShader={uniforms:{tDiffuse:{value:null},tScratchpad:{value:null},uStepWidth:{type:"f",value:.0017},uGlowFactor:{type:"f",value:.031}},vertexShader:["#extension GL_EXT_draw_buffers : require","#extension GL_EXT_frag_depth : enable","precision mediump float;","varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#extension GL_EXT_draw_buffers : require","#extension GL_EXT_frag_depth : enable","precision mediump float;","uniform sampler2D tDiffuse;","uniform sampler2D tScratchpad;","uniform float uStepWidth;","uniform float uGlowFactor;","#define SAMPLE_STEPS 3","#define SAMPLE_SIZE 2*SAMPLE_STEPS+1","varying vec2 vUv;","void main()","{","\tvec4 c= texture2D(tDiffuse, vUv.xy );","\tvec4 d= texture2D(tScratchpad, vUv.xy );","\tfloat result= 0.;","\tfloat maxDist= distance(float(SAMPLE_STEPS),float(SAMPLE_STEPS));","\tfloat startx = vUv.x - float(SAMPLE_STEPS) * uStepWidth;","\tfloat starty = vUv.y - float(SAMPLE_STEPS) * uStepWidth;","\tfor(int i= 0; i< SAMPLE_SIZE; i++) {","\t\tfor(int j= 0; j< SAMPLE_SIZE;j++) {","\t\t\tif (texture2D(tScratchpad, vec2(startx+float(i)*uStepWidth,starty+float(j)*uStepWidth)).r == 1.) {","\t\t\t\tfloat w= distance(abs(float(i-SAMPLE_STEPS)), abs(float(j-SAMPLE_STEPS)));","\t\t\t\tw=1.-((maxDist/w));","\t\t\t\tresult+= w;","\t\t\t}","\t\t}","\t}","\tresult*= uGlowFactor;","\tresult= abs(result);","\tgl_FragData[0] = vec4(min(1., c.x+result), min(1., c.y+result), min(1., c.z+result), 1.);","\tgl_FragData[1] = d;","}"].join("\n")},WOO.ExhaustGlowPass=function(){THREE.Pass.call(this),void 0===WOO.ExhaustGlowShader&&console.error("WOO.ExhaustGlowPass relies on WOO.ExhaustGlowShader");var a=WOO.ExhaustGlowShader;this.uniforms=THREE.UniformsUtils.clone(a.uniforms),this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader}),this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new THREE.Scene,this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad)},WOO.ExhaustGlowPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:WOO.ExhaustGlowPass,render:function(a,b,c,d,e){this.uniforms.tDiffuse.value=c.texture,this.uniforms.tScratchpad.value=c.attachments[1],this.quad.material=this.material,this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,b,this.clear)}}),WOO.RaysShader={uniforms:{tDiffuse:{value:null},tScratchpad:{value:null},exposure:{value:1},decay:{value:.1},density:{value:.05},weight:{value:.8},lightPositionOnScreen:{type:"v2",value:new THREE.Vector2(700,100)}},vertexShader:["#extension GL_EXT_draw_buffers : require","precision mediump float;","varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#extension GL_EXT_draw_buffers : require","precision mediump float;","uniform sampler2D tDiffuse;","uniform sampler2D tScratchpad;","uniform float exposure;","uniform float decay;","uniform float density;","uniform float weight;","uniform vec2 lightPositionOnScreen;","const int NUM_SAMPLES = 100;","varying vec2 vUv;","void main()","{","vec2 xy = vUv;","vec2 deltaXy = vec2( xy - lightPositionOnScreen.xy );","vec4 c= texture2D(tDiffuse, xy );","deltaXy *= 1. /  (float(NUM_SAMPLES) * density);","float lumDecay = 1.;","for(int i=0; i < NUM_SAMPLES ; i++) {","\t xy -= deltaXy;","\t float t = texture2D(tScratchpad, xy ).y;","\t if (t == 1.) {","\t \tc += vec4(1.,1.,1.,0.) * (lumDecay * weight);","\t }","\t lumDecay *= decay;","}","gl_FragData[0] = c*exposure;","}"].join("\n")},WOO.RaysPass=function(a,b,c,d,e){THREE.Pass.call(this),void 0===WOO.RaysShader&&console.error("WOO.RaysPass relies on WOO.RaysShader");var f=WOO.RaysShader;this.uniforms=THREE.UniformsUtils.clone(f.uniforms),this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:f.vertexShader,fragmentShader:f.fragmentShader}),void 0!==a&&(this.uniforms.lightPositionOnScreen.value=a),void 0!==b&&(this.uniforms.weight.value=b),void 0!==c&&(this.uniforms.density.value=c),void 0!==d&&(this.uniforms.decay.value=d),void 0!==e&&(this.uniforms.exposure.value=e),this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new THREE.Scene,this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad)},WOO.RaysPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:WOO.RaysPass,render:function(a,b,c,d,e){this.uniforms.tDiffuse.value=c.texture,this.uniforms.tScratchpad.value=c.attachments[1],this.quad.material=this.material,this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,b,this.clear)}}),WOO.Condenser=function(){this.condenserPass=new WOO.CondenserPass,this.condensers=[this.createCondenseRenderTarget(0),this.createCondenseRenderTarget(1),this.createCondenseRenderTarget(2),this.createCondenseRenderTarget(3),this.createCondenseRenderTarget(4),this.createCondenseRenderTarget(5),this.createCondenseRenderTarget(6),this.createCondenseRenderTarget(7),this.createCondenseRenderTarget(8),this.createCondenseRenderTarget(9),this.createCondenseRenderTarget(10),this.createCondenseRenderTarget(11)]},WOO.Condenser.prototype={runChain:function(a,b,c,d){for(var e=a.getSize().width,f=a.getSize().height,g=e*c*2,h=new THREE.Vector2((e*b.x-g/2)/e,(f*b.y-g/2)/f),i=0,j=1;j<g;i++,j*=2);var k={texture:d,texSize:new THREE.Vector2(e,f)};for(i-=1;i>=0;){var l=Math.pow(2,i);this.condenserPass.uniforms.srcOffset.value=h,this.condenserPass.uniforms.destSizePx.value=l;var m=this.condensers[i];if(i==-1){this.condenserPass.renderToScreen=!0,this.condenserPass.render(a,m,k,null,null);break}this.condenserPass.renderToScreen=!1,this.condenserPass.render(a,m,k,null,null),k=m,i--,h=new THREE.Vector2(0,0)}},getResultTexture:function(){return this.condensers[1].texture},createCondenseRenderTarget:function(a){var b=Math.pow(2,a),c=new THREE.WebGLRenderTarget(b,b);return c.texSize=new THREE.Vector2(b,b),c.texture.name="condense "+a,c.texture.format=THREE.RGBAFormat,c.texture.type=THREE.UnsignedByteType,c.texture.generateMipmaps=!1,c.texture.wrapS=c.texture.wrapT=THREE.ClampToEdgeWrapping,c.texture.minFilter=THREE.NearestFilter,c.texture.magFilter=THREE.NearestFilter,c.stencilBuffer=!1,c.depthBuffer=!1,c}},WOO.CondenserShader={uniforms:{srcOffset:{type:"v2",value:new THREE.Vector2},srcSizePx:{type:"v2",value:new THREE.Vector2},destSizePx:{type:"f",value:0},tInputTexture:{value:null}},vertexShader:["#ifdef GL_ES","precision highp float;","#endif","varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#ifdef GL_ES","precision highp float;","#endif","uniform vec2 srcOffset;","uniform vec2 srcSizePx;","uniform float destSizePx;","uniform sampler2D tInputTexture;","varying vec2 vUv;","void main()","{","\tfloat s= destSizePx*2.;","\tvec2 inputRange= vec2(s/srcSizePx.x, s/srcSizePx.y);","\tfloat dx= inputRange.x/s;","\tfloat dy= inputRange.y/s;","\tvec2 ic= vUv;","\tvec2 texCoord= ic;","\ttexCoord.x= srcOffset.x+(inputRange.x*texCoord.x);","\ttexCoord.y= srcOffset.y+(inputRange.y*texCoord.y);","\tif(texture2D( tInputTexture, texCoord).b > 0.0) gl_FragColor =\t\t\t\t\t\tvec4(0.,0.,1.,1.);","\telse if(texture2D( tInputTexture, texCoord+vec2(0. ,dy)).b > 0.0) gl_FragColor = \tvec4(0.,0.,1.,1.);","\telse if(texture2D( tInputTexture, texCoord+vec2(dx, dy)).b > 0.0) gl_FragColor = \tvec4(0.,0.,1.,1.);","\telse if(texture2D( tInputTexture, texCoord+vec2(dx, 0.)).b > 0.0) gl_FragColor = \tvec4(0.,0.,1.,1.);","\telse","\t\tgl_FragColor = vec4(0.,0.,0.,1.);","}"].join("\n")},WOO.CondenserPass=function(){THREE.Pass.call(this),void 0===WOO.CondenserShader&&console.error("WOO.CondenserPass relies on WOO.CondenserShader");var a=WOO.CondenserShader;this.uniforms=THREE.UniformsUtils.clone(a.uniforms),this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader}),this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new THREE.Scene,this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad)},WOO.CondenserPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:WOO.CondenserPass,render:function(a,b,c,d,e){this.uniforms.tInputTexture.value=c.texture,this.uniforms.srcSizePx.value=c.texSize,this.quad.material=this.material,this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,b,this.clear)}});